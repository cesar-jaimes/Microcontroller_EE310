//-----------------------------
// Title: Counter
//-----------------------------
// Purpose: We are building a counter which operates with two buttons. One must 
// count up from 0x0 to 0xF, and the other must count down. Button A must count 
// up starting at 0 and stop at the current value, 9 for example when you release
// the button. Button B should do the same counting down. If A & B are pressed 
// together it should display 0. If none are pressed it should display the last number
// Dependencies: newAsmTemplate.inc
// Author: Cesar Jaimes
// OUTPUTS: PORTD (7-segment display)
// INPUTS: _buttonA (PORTB0), and _buttonB (PORTB1)
// Versions:
//  	V1.0: 3/25/25
//-----------------------------

#include "newAsmTemplate.inc"
#include <xc.inc>
;----------------------------------

;----------------------------------
; PROGRAM CONSTANTS
;----------------------------------
#define	zero	0b00111111
#define one	0b00000110
#define two	0b01011011
#define three	0b01001111
#define four	0b01100110
#define five	0b01101101
#define six	0b01111101
#define seven	0b00000111
#define eight	0b01111111
#define nine	0b01101111
#define a	0b01110111
#define b	0b01111100
#define c	0b00111001
#define d	0b01011110
#define	e	0b01111001
#define f	0b01110001
REG10	EQU	0x10
REG11	EQU	0x11
inner_loop  EQU	240
outer_loop  EQU	240
ZEROcheck   EQU	0x40
Fcheck	    EQU	0x41
;----------------------------------

;----------------------------------
; PROGRAM INPUTS/OUTPUTS
;----------------------------------
#define	_buttonA	PORTB, 0
#define _buttonB	PORTB, 1
#define sevenSeg	PORTD
;----------------------------------
    
;----------------------------------
; MAIN PROGRAM
;----------------------------------
PSECT absdata,abs,ovrld

ORG	0x20	    
_initialize:
    RCALL    _setPortD
    RCALL    _setPortB
    RCALL    _loadValues

_main:
    RCALL   _checkSwitches
    BRA	    _main
    
    
_setPortD:
    BANKSEL	PORTD 
    CLRF	PORTD 
    BANKSEL	LATD 
    CLRF	LATD 
    BANKSEL	ANSELD 
    CLRF	ANSELD 
    MOVLW	0b00000000 
    MOVWF	TRISD 
    RETURN

_setPortB:
    BANKSEL	PORTB 
    CLRF	PORTB 
    BANKSEL	LATB 
    CLRF	LATB 
    BANKSEL	ANSELB 
    CLRF	ANSELB
    MOVLW	0b11111100 
    MOVWF	TRISB 
    RETURN
    
_loadValues:
MOVLW	0x30
MOVWF	ZEROcheck
MOVLW	0x3F
MOVWF	Fcheck
MOVLW	zero	    
MOVWF	0x30	    
MOVLW	one	    
MOVWF	0x31	    
MOVLW	two
MOVWF	0x32	    
MOVLW	three
MOVWF	0x33	   
MOVLW	four
MOVWF	0x34	    
MOVLW	five
MOVWF	0x35	    
MOVLW	six
MOVWF	0x36	   
MOVLW	seven
MOVWF	0x37	   
MOVLW	eight
MOVWF	0x38	  
MOVLW	nine
MOVWF	0x39	 
MOVLW	a
MOVWF	0x3A	
MOVLW	b
MOVWF	0x3B	 
MOVLW	c
MOVWF	0x3C	
MOVLW	d
MOVWF	0x3D	    
MOVLW	e
MOVWF	0x3E	    
MOVLW	f	    
MOVWF	0x3F	    
LFSR	0, 0x30	    ;load FSR0 
MOVFF	INDF1, PORTD
RETURN
    

    
_checkSwitches:
BTFSS	_buttonA	;check if switch A is pressed
BRA	_Aoff		;if switch A not on
BTFSS	_buttonB	;if switch A is set --> check switch B
BRA	_countUP	;if switch B is not on
BRA	_bothON		;if switch A and B are ON
RETURN
    
_Aoff:
BTFSS	_buttonB    ;check if switch B is set
GOTO	_bothOFF    ;if both A and B are off
GOTO	_countDOWN  ;if A is off and B is on --> count down

_onlyA_ON:
GOTO	_countUP    ;only A is ON

_bothON:
LFSR	1,0x30
MOVFF	INDF1, PORTD
GOTO	_main
    
_bothOFF:
MOVFF	INDF1, PORTD
GOTO	_checkSwitches
    
_countUP:
CLRF	WREG		;clear WREG
MOVFF	FSR1, WREG
CPFSEQ	0x41		;check if FSR1 equals F (Fcheck REG)
GOTO	_increment
LFSR	1, 0x30		;load 0 back into FSR1
CALL	_delayLoop
_increment:
MOVFF	INDF1, PORTD	;move value to PORTD
MOVFF	POSTINC1, PORTD	;move to next value counting up
CALL	_delayLoop
CALL	_checkSwitches
GOTO	_countUP  ;_main	;loop again
    
_countDOWN:
CLRF	WREG		;clear WREG
MOVFF	FSR1, WREG
CPFSEQ	0x40		;check if FSR1 equals ZERO (ZEROcheck REG)
GOTO	_decrement	
LFSR	1, 0x3F		;load F back into FSR1
CALL	_delayLoop
_decrement:
MOVFF	POSTDEC1, PORTD	;move to next value counting down
CALL	_delayLoop
CALL	_checkSwitches
GOTO    _countDOWN	

    
_delayLoop: 
    MOVLW       inner_loop
    MOVWF       REG10
    MOVLW       outer_loop
    MOVWF       REG11
_loop1:
    DECF        REG10,1
    BNZ         _loop1
    MOVLW	inner_loop
    MOVWF	REG10
    DECF        REG11,1 
    BNZ        _loop1
    RETURN
    
;END    
